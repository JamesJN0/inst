const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
const db = new sqlite3.Database('./usuarios.db');

app.use(cors());
app.use(bodyParser.json());

// Cria tabela se não existir
db.run(`CREATE TABLE IF NOT EXISTS usuarios (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username VARCHAR(50) UNIQUE NOT NULL,
    senha VARCHAR(255) NOT NULL,
    nome_completo VARCHAR(100),
    email VARCHAR(100) UNIQUE,
    criado_em DATETIME DEFAULT CURRENT_TIMESTAMP
)`);

// Cadastro de usuário
app.post('/api/cadastrar', (req, res) => {
    const { username, senha, nome_completo, email } = req.body;
    db.run(
        `INSERT INTO usuarios (username, senha, nome_completo, email) VALUES (?, ?, ?, ?)`,
        [username, senha, nome_completo, email],
        function (err) {
            if (err) return res.status(400).json({ erro: 'Usuário já existe ou dados inválidos.' });
            res.json({ sucesso: true, id: this.lastID });
        }
    );
});

// Login de usuário
app.post('/api/login', (req, res) => {
    const { username, senha } = req.body;
    db.get(
        `SELECT * FROM usuarios WHERE username = ? AND senha = ?`,
        [username, senha],
        (err, row) => {
            if (row) {
                res.json({ sucesso: true, usuario: row });
            } else {
                res.status(401).json({ sucesso: false, erro: 'Usuário ou senha incorretos.' });
            }
        }
    );
});

app.listen(3000, () => console.log('Servidor rodando na porta 3000'));